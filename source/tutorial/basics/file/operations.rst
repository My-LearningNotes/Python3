文件基本操作
============

对文件的操作有很多种, 常见的操作包括创建, 删除, 修改权限, 读取, 写入等, 这些操作可大致分为两类:

    * 删除, 修改权限: 作用于文件本身, 属于\ **系统系操作**\ ;
    * 写入, 读取: 是文件最常用的操作, 作用于文件的内容, 属于\ **应用级别操作**\ .

对于文件的系统级操作功能单一, 比较容易实现, 可以借助Python中的专用模块(``os``, ``sys``\ 等), 调用指定的函数来实现.
而对于文件的应用级操作, 通常需要按照固定的步骤进行, 且实现过程相对比较复杂.

文件的应用级操作可以分为以下3步, 每一步都需要借助对应的函数实现:

    * 打开文件: 使用\ ``open()``\ 函数, 该函数会返回一个文件对象;
    * 对已打开文件做读/写操作: 读取文件内容可使用\ ``read()``\ , ``readline()``\ 和\ ``readlines()``\ 函数, 向文件中写入内容, 可以使用\ ``write()``\ 函数;
    * 关闭文件: 对文件的读/写操作完成之后, 最后需要关闭文件, 可以使用\ ``close()``\ 函数.

一个文件, 必须在打开之后才能对其进行操作, 并且在操作结束之后, 还应该将其关闭.


创建/打开文件
-------------

如果想要操作文件, 首先需要创建或者打开指定的文件, 并创建一个文件对象, 这些工作可以通过内置的\ ``open()``\ 函数实现. 

``open()``\ 函数用于\ **创建或打开指定文件**\ , 其常用语法格式如下:

.. code-block:: python

    file = open(filename, mode='r', buffering=-1, encoding=None)

* ``file``: 创建的文件对象;
* ``filename``: 要创建或打开的文件的名称;
* ``mode``: 可选参数, 指定文件的打开模式;
* ``buffering``: 可选参数, 用于指定对文件进行读写操作时, 是否使用缓冲区;
* ``encoding``: 指定打开文件时所使用的编码格式, 不同平台的\ ``encoding``\ 参数值也不同.

.. table:: open()函数支持的文件打开模式

    ==== ======================================================================
    模式 说明
    r    只读模式, 文件指针会放在文件的开头. 若文件不存在, 则会报错.
    rb   二进制格式, 只读模式.
    r+   同r一样, 但是可读可写.
    rb+  同rb一样, 但是可读可写.
    w    写模式, 若文件存在, 会清空其中的内容. 若文件不存在, 则会创建文件.
    wb   二进制格式, 写模式.
    w+   同w一样, 但是可读可写. 
    wb+  同wb一样, 但是可读可写.
    a    追加模式, 只有写权限. 若文件不存在, 则会创建文件.
    ab   二进制格式, 追加模式.
    a+   同a一样, 但是可读可写.
    ab+  同ab一样, 但是可读可写.
    ==== ======================================================================


文件格式和二进制格式打开文件的区别
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

实际上, 从计算机的角度来看, 文本文件和二进制文件没有区别, 它们的内容都是以二进制的形式保存在磁盘中的. 
对于文本文件, 是将字符按一定的格式编码后(ASCII, UTF-8, GBK等)存储起来, 而对于二进制文件, 是直接将数据按其二进制格式保存.
文本文件通常是可读的, 因为文本文件打开之后, 编辑器根据编码格式, 将其中的二进制数据转换为字符; 
二进制文件通常用来保存视频, 图片, 音频等不可读的数据.

**使用文件格式和二进制格式打开文件, 唯一的区别是对文件中换行符的处理不同.**

在Windows系统中, 文件使用\ ``\r\n``\ 作为换行符, 当以文本格式读取文件时, 会将\ ``\r\n``\ 转换成\ ``\n``\ ; 
反之, 以文本格式将数据写入文件时, 会将\ ``\n``\ 转换成\ ``\r\n``\ .
这种隐式转换换行符的行为, 对用文本格式格式打开文件是没有问题的, 但如果用文本格式打开二进制文件, 就有可能改变文件中的数据(将\ ``\r\n``\ 隐式转换为\ ``\n``).

而在Unix/Linux系统中, 默认的文件换行符就是\ ``\n``\ , 因此在Unix/Linux系统中文本文件和二进制文件并无本质的区别.

总的来说, 为了保险起见, 对于Windows平台最好用\ ``b``\ 打开二进制文件, 对于Unix/Linux平台, 打开二进制文件, 可以用\ ``b``\ , 也可以不同.


是否使用缓冲区
^^^^^^^^^^^^^^

通常情况下, 建议在使用\ ``open()``\ 函数时打开缓冲区, 即不需要修改\ ``buffering``\ 参数的值.

.. note::

    如果\ ``buffering``\ 参数的值为0(或者False), 则表示在打开指定文件时不使用缓冲区; 
    如果\ ``buffering``\ 参数值为大于1的整数, 该整数用于指定缓冲区的大小(单位是字节); 
    如果\ ``buffering``\ 参数的值为负数, 则代表使用默认的缓冲区大小.

为什么呢? 
原因很简单, 目前计算机内存的I/O速度仍远远高于外设(例如键盘, 鼠标, 硬盘等)的I/O速度, 如果不使用缓冲区, 则程序在执行I/O操作, 内存和外设就必须进行同步读写操作, 
也就是说, 内存必须等待外设输入(输出)一个字节之后，才能再次输入(输出)下一个字节. 这意味着, 内存中的程序大部分时间都处于等待状态.

而如果使用缓冲区, 则程序在执行输出操作时, 会先将所有数据输出至缓冲区, 然后继续执行其它操作, 缓冲区中的数据会有外设自行读取处理; 
同样, 当程序执行输入操作时, 会先等外设将数据读入缓冲区中, 无需同外设做同步读写操作.


文件对象的常用属性
^^^^^^^^^^^^^^^^^^

成功打开文件之后, 可以调用文件对象的属性获取当前文件的部分信息, 其常见属性如下:

    * ``file.name``: 文件的名称;
    * ``file.mode``: 文件的打开模式;
    * ``file.encoding``: 打开文件时使用的编码格式;
    * ``file.closed``: 判断文件是否已经关闭.


读写文件
--------

文件最重要的功能就是读写数据. 
在文本和二进制模式下, 分别将\ ``str``\ 和\ ``bytes``\ 类用作数据.


读取
^^^^

读取文件有3个函数可用:

    * ``read()``\ 函数: 逐个字符或字节读取文件;
    * ``readline()``\ 函数: 逐行读取文件;
    * ``readlines()``\ 一次性读取文件中的所有行.

* ``read()``\ 函数

基本语法格式:

.. code-block:: python

    file.read(size)

``size``\ 作为一个可选参数, 用于指定一次最多可读取的字符(字节)个数, 如果省略, 则默认一次读取所有内容. 
注意, ``size``\ 表示的是一次最多可读取的字符(字节)数, 因此, 即便设置的\ ``size``\ 大于文件中存储的字符(字节)数, 也不会报错, 它只会读取文件中所有的数据.

.. note::

    如果是以文本模式打开文件, 则\ ``read()``\ 函数会逐个字符进行读取; 
    如果是以二进制模式打开文件, 则\ ``read()``\ 函数会逐个字节进行读取. 

``read()``\ 函数抛出\ ``UnicodeDecodeError`` 异常的解决方法

在使用\ ``read()``\ 函数时, 如果抛出\ ``UnicodeDecodeError``\ 异常, 其原因在于: 目标文件使用的编码格式和\ ``open()``\ 函数打开文件时指定的编码格式不一致.

举个例子, 如果目标文件的编码格式为GBK编码, 而我们在使用\ ``open()``\ 函数并以文本模式打开该文件时, 手动指定\ ``encoding``\ 参数为UTF-8. 
这种情况下, 由于编码格式不匹配, 当使用\ ``read()``\ 函数读取目标文件文件时, Python解释器就会抛出\ ``UnicodeDecodeError``\ 异常.

要解决这个问题, 需要将\ ``open()``\ 函数中的\ ``encoding``\ 参数修改为和目标文件相同的编码格式.

除此之外, 还有一种解决方法: 先使用二进制模式读取读取文件, 然后调用\ ``bytes``\ 的\ ``decode()``\ 方法, 使用目标文件的编码格式, 将读取到的字节串解码为字符串.

* ``readline()``\ 函数

基本语法格式:

.. code-block:: python

    file.readline(size)

``size``\ 为可选参数, 用于指定读取一行时, 一次最多读取的字符(字节)数, 如果没有指定, 则默认读取一行直到遇到换行符(``\n``). 
注意, 换行符(``\n``)也会被读取.


* ``readlines()``\ 函数

基于语法格式:

.. code-block:: python

    file.readlines()

``readlines()``\ 函数用于读取文件中的所有行, 返回一个字符串列表, 其中每个元素为文件中的一行.

.. not::

    和\ ``readline()``\ 函数一样, ``readlines()``\ 函数在读取每一行时, 也会连同行尾的换行符一起读取.

