导入模块
========

在Python中使用关键字\ ``import``\ 导入模块, 其用法主要有:

    *   ``import ...``
    *   ``from ... import ...``


``import ...``
--------------

把指定的模块作为一个整体导入到当前作用域中, 使用模块中的成员(变量, 函数或类)时, 需要用模块名作为前缀.


``from ... import ...``
-----------------------

把一个模块中的指定成员(变量, 函数或类)导入到当前作用域中, 导入后, 在当前作用域中可以直接使用导入的成员(不需要使用模块名作为前缀).


给导入的模块重命名
------------------

*   使用关键字\ ``as``

.. code-block:: python

    import A as B


*   使用赋值语句

.. code-block:: python

    import A 
    B = A
    del A


总结
----

*   如果在一个导入语句中导入多个模块/包, 它们之间用逗号分隔, 但通常不建议这么做, 建议每个导入语句只导入一个模块/包;
*   导入语句可以出现在程序中的任何位置, 但同一个模块只会被导入依次, 不管执行了多少次\ ``import``\ ;
*   不论是\ ``import``\ 还是\ ``from ... import ...``\  , 不论是导入模块还是导入包, **都不会递归导入**\ ;
*   导入时, 需要注意导入的名称和当前作用域中的名称之间可能的冲突问题;
*   导入一个模块, 就是导入模块的内容, 模块的内容存储在\ ``.py``\ 文件中, 所以导入模块就是导入相应的\ ``.py``\ 文件;
    对于一个包, 它对应的\ ``.py``\ 文件就是它的\ ``__init__.py``\ 文件, 所以导入一个包, 就是到\ ``__init__.py``\ 文件;
*   导入一个包时, 只是导入该包的\ ``__init__.py``\ 文件, **不会递归导入该包中的模块和子包**\ ;
*   ``from ... import *``\ 语句会导入内容中(包的\ ``__init__.py``\ 文件中或模块文件中)的\ ``__all__``\ 变量定义的所有名称, 
    如果没有定义\ ``__all__``\ 变量, 则导入所有没有以两个下划线开头的名称(应该尽量避免使用这种导入方式).

