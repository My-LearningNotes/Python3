列表和元组
==========

数据结构 = 数据 + 结构，是以一定的结构组合起来的数据元素的集合。

在Python中，最基本的数据结构是\ **序列(sequence)**\ 。

序列中的元素按顺序存储，每个元素都有自己的编号(即其位置或索引)，其中第一个元素的索引为０，第二个元素的索引为1，以此类推。

在有些编程语言中，从1开始给序列中的元素编号，但从0开始指出相对于序列开头的偏移量。
这显得更加自然，同时可回绕序列末尾，用负索引表示序列末尾元素的位置。

序列概述
--------

Python内置了多种序列，其中最常用的是:**列表**\ ，\ **元组**\ 和\ **字符串**\ 。

-  在Python中，列表和元组的元素，可以是异构的(即可以是不同的类型)

-  列表和元组的主要不同在于: 列表是可以修改的，而元组不可以

.. note::

    Python支持一种数据结构的基本概念，名为容器(container)。

    容器基本上就是可以包含其他对象的对象。

    两种主要的容器是序列(如列表和元组)和映射(如字典)。

    在序列中，每个元素都有自己的编号，而在映射中，每个元素都有自己的名称名称(也叫键盘)。

    有一种既不是序列也不是映射的容器，它就是集合(set)。

    容器，是以面向对象的思想，对数据结构的理解。

通用的序列操作
~~~~~~~~~~~~~~

有几种操作适用于所有的序列，包括: 索引，切片，相加，相乘和成员资格检查。

另外，Python还提供了一些内置函数，可用于确定序列的长度以及找出序列中最大和最小的元素。

索引
^^^^

-  序列中的所有元素都有编号(从0开始递增)，可以使用编号来访问各个元素:``seq[index]``

-  在Python中，可以使用负数索引，表示从右向左数，因此\ ``-1``\ 是最后一个元素的位置(表示相对首元素的偏移量)，\ ``-2``\ 是倒数第二个元素的索引，以此类推

-  对于序列的字面量，可直接对其执行索引操作，无需先将其赋值给变量

切片
^^^^

-  使用索引是访问特定位置的某一个元素，而使用切片是访问特定位置范围内的一组元素

-  切片的使用形式: ``seq[start:stop:step]``

   切片适用于访问序列的一部分，其中的编号非常重要:

   -  第一个索引是包含的第一个元素的编号

   -  第二个索引是切片的最后一个元素的下一个元素的编号，即切片表示的范围为:\ ``[start, stop)``

   -  ``step``\ 表示前后两个元素之间的步长

      -  如果没有指定步长，默认为1

      -  步长可以为负数，表示从右向左数

      -  不论是从左向右数还是从右向左数，如果第一个索引指定的元素位于第二个索引指定的元素后面，结果就为一个空序列

-  如果切片开始于序列开头，可省略第一个索引

-  如果切片结束于序列末尾，可省略第二个索引

-  两个索引都省略，表示整个序列

-  切片得到的类型和源的类型是一致的，列表的切片是列表，元组的切片是元组，字符串的切片是字符串

序列相加
^^^^^^^^

可以使用加法运算来拼接序列，一般而言，不能拼接不同类型的序列。

乘法
^^^^

将序列与数Ｎ相乘时，表示重复这个序列N次来创建一个新的序列。

成员资格检查
^^^^^^^^^^^^

要检查特定的值是否包含在序列中，可使用运算符\ ``in``\ ；

-  ``in``

-  ``not in``

将运算符\ ``in``\ 用于字符串时情况比较特殊 - 可查找子串。


长度，最小值和最大值
^^^^^^^^^^^^^^^^^^^^

内置函数\ ``len``, ``min``\ 和\ ``max``\ 很有用

-  函数\ ``len``\ 返回序列包含的元素个数

-  ``min``\ 返回序列中的最小值

-  ``max``\ 返回序列中的最大值

None,空序列和初始化
^^^^^^^^^^^^^^^^^^^

-  在Python中，\ ``None``\ 表示什么都没有

-  空序列，表示一个元素都没有的序列

   -  空列表 - ``[]``

   -  空元组 - ``()``

   -  空字符串 - ``''``

列表 - Python的主力
-------------------

列表用方括号\ ``[]``\ 定义，元素之间用\ ``,``\ 分隔；

列表中的元素的类型可以不同，支持数字，字符串，甚至可以包含列表(嵌套)。

-  函数\ ``list``

   可将可迭代对象作为\ ``list``\ 的参数，来创建一个列表。

-  基本的列表操作

   可对列表执行所有的标准序列操作:索引，切片，相加，相乘和成员检查，但列表的有趣之处在于它是可以修改的。

-  修改列表: 给元素赋值

   -  使用索引表示特定位置地元素

   -  使用普通的赋值语句赋值

   -  不能给不存在的元素赋值

-  删除元素

   -  可以使用\ ``del``\ 从列表中删除指定位置的元素

   -  可以使用\ ``del``\ 和切片，从列表中删除指定位置范围内的元素

   -  可以使用\ ``del``\ ，删除整个列表

-  给切片赋值

   切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。

   可以通过索引对指定位置的元素赋值，也可以通过切片对一定范围的一组元素赋值。

   -  通过对切片赋值，可以同时对多个元素赋值

      .. code:: python

          numbers = [1, 2, 3, 4, 5, 6]
          numbers[2:5] = [30, 40, 50]

   -  通过使用切片赋值，可将切片替换为长度与其不同的序列

      .. code:: python

          numbers = [1, 2, 3, 4, 5, 6]
          numbers[2:5] = [10, 20, 30, 40, 50]

   -  使用切片赋值，还可在不替换原有元素的情况下插入新元素

      .. code:: python

          numbers = [1, 5]
          numbers[1:1] = [2, 3, 4]

      ``L[n:n]``\ 表示指定位置的一个空切片，用一个序列替换一个空切片，相当于在指定位置插入了一个序列。

   -  可以将空序列赋值给切片，以实现删除操作

      .. code:: python

          numbers = [1, 2, 3, 4, 5, 6]
          numbers[:] = []

-  列表方法

   列表包含很多方法，使用这些方法，可以完成很多常用的操作。

元组 - 不可修改的序列
---------------------

-  与列表一样，元组也是序列，唯一的区别在于元组是不可修改的(同字符串一样，字符串也是不能修改的)

-  元组用圆括号\ ``()``\ 定义，元素之间用逗号分隔；定义元组时，也可以不用圆括号，只用逗号分隔元素

-  元组中的元素也可以是不同的类型

-  空元组用两个不包含任何内容的圆括号表示

-  只包含一个元素的元组，必须在唯一的元素的后面加上一个逗号，以和数字区别，例如:
   ``(32)``\ 表示数32, ``(32,)``\ 表示一个元组

-  函数\ ``tuple``\ 的工作原理和\ ``list``\ 一样，它将一个可迭代对象作为参数，创建一个元组

