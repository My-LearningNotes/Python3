字符串
======

-   在C/C++中, 字符串是以\ ``\0``\ 作为结束标志的\ **字符数组**\ ; 
    而在Python中, 字符串是一种\ **基本数据类型**\ , 没有所谓的字符串结束标志;

-   在Python中没有单独的字符类型, 一个字符就是只有一个元素的字符串;

-   在Python中, 可以使用\ ``''``\ 或\ ``""``\ 来定义字符串, Python的风格是尽量使用单引号;

    .. note::
        
        在Python中, 定义字符串时, 单引号和双引号没有区别.
        不像在Shell中, 单引号和双引号是有区别的.

-   如果字符串本身包含\ ``'``, 用\ ``"``\ 包裹字符串; 如果字符串本身包含\ ``"``, 用\ ``'``\ 包裹字符串;

    Example:

    .. code-block:: python

        x = "hello'world"
        y = 'hello"world'

-   转义字符以\ ``\``\ 开头, 如果不想反斜杠转义, 可以在字符串前添加一个\ ``r``\ 或\ ``R``\ ，表示原始字符串(所见即所得).

    也可以使用两个反斜杠, 前面的反斜杠表示对后面的反斜杠转义, 将其作为普通字符.

    Example:

    .. code-block:: python

        r'hello, world\n'
        'hello, world\\n'


str函数
-------

以给定的对象为参数, 创建一个字符串.


字符串基本操作
--------------

所有的标准序列操作(索引, 切片, 加法, 乘法, 成员资格检查, 长度, 最小值和最大值)都适用于字符串;
但\ **字符串是不可变类型**\ , 因此所有的元素赋值和切片赋值都是非法的.


设置字符串的格式: 精简版
------------------------

老式的字符串格式设置
~~~~~~~~~~~~~~~~~~~~

老式的设置方式是使用字符串格式设置运算符 - ``%``, 基本形式为: ``STRING % VALUE``.

-   这个运算符的行为类似于C语言中的经典函数\ ``printf``: 在\ ``%``\ 左边指定一个字符串, 并在右边指定要设置其格式的值;

-   指定要设置格式的值时

    -   可使用单个值(如字符串或数字)

    -   多个值时，用一个元组表示

-   在字符串中, 使用转换说明符, 说明在什么位置, 以什么格式插入值.

Example:

.. code-block:: python

    format = 'hello, %s. %s enough or ya?'
    values = ('world', 'Hot')
    format % values

这种格式设置的方法现在依然管用, 且依然活跃在众多代码中.


新式的字符串格式设置
~~~~~~~~~~~~~~~~~~~~

编写新代码时, 应选择使用字符串方法\ ``format``.

-   在字符串中, 每个替换字段都用\ ``{}``\ 括起来, 其中可能为空, 也可能包含索引, 名称, 还可能包含有关如何对相应的值进行转换和格式设置的信息;

-   在\ ``format``\ 方法中, 以序列或map的格式, 列出要格式化的值.

对于替换字段, 可以有以下几种使用形式:

-   替换字段为空

    根据替换字段的位置, 按顺序依次对应\ ``format``\ 中的各个值.

-   替换字段中使用索引

    按索引对应\ ``format``\ 中的各项, 使用索引时, 无需按顺序排列.

-   在\ ``format``\ 中定义命名字段, 在替换字段中通过名称使用

Example:

.. code-block:: python

    '{} {} {}'.format('first', 'second', 'third')
    '{3} {0} {2} {1} {3} {0}'.format('be', 'not', 'or', 'to')
    'name is {name}, age is {age}'.format(name='sylar', age=18)

