测试驱动开发
============

要避免代码在开发途中被淘汰, 必须能够\ **应对变化**\ 并具备一定的灵活性, 因此为程序的各个部分编写测试至关重要(这称为\ **单元测试**), 而且是应用程序设计工作的重要组成部分.

极限编程先锋引入了\ **测试一点点, 再编写一点点代码**\ 的理念. 
这种理念与直觉不太相符, 却很管用, 胜过与直觉一致的\ *编写一点点代码, 再测试一点点*\ 的做法.

换而言之, **测试在先, 编码在后**\ , 这也称为\ **测试驱动开发(TDD, Test Drive Development)**\ . 
对于这种做法, 一开始可能不太习惯, 但它有很多优点, 而且随着时间的推移, 就会慢慢习惯. 
习惯了测试驱动的编程之后, 在没有测试的情况下编写代码真的让人觉得别扭.


测试驱动开发的好处
------------------

* **测试可以作为准确的需求说明**

开发软件时, 必须先知道软件要解决什么问题, 要实现什么样的目标. 
要阐明程序的目标, 可编写\ **需求说明**\ , 也就是描述程序必须满足何种需求的文档. 
这样以后很容易核实需求是否得到了满足. 

.. note::

    需求的类型众多, 这里的重点是\ **功能需求**\ , 即程序必须提供哪些功能.

测试驱动开发的理念是\ **先编写测试, 再编写让测试通过的程序**\ . 
测试程序就是需求说明, 可帮助确保程序开发过程中紧扣这些需求.

* **测试, 让我们拥抱变化**

自动化测试不仅可以在\ **编写程序**\ 时提供极大的帮助, 还有助于在\ **修改代码**\ 时避免累积错误, 这在程序规模很大时尤其重要. 
我们必须做好修改代码的心里准备, 而不是固有既有的代码, 但修改代码是有风险的.

.. note::

    无论在编写代码还是在修改代码时, 代码都必须通过单元测试, 这样就能保证代码的正确性.


测试四部曲
----------

测试驱动开发过程的各个阶段:

    * 确定需要实现的新功能. 可将其记录下来, 再为之编写一个测试.
    * 编写实现功能的框架代码, 让程序能够运行(不存在语法错误之类的问题), 但测试依然无法通过. 
      测试失败是很重要的, 因为这样才能确定它可能失败. 
      如果测试有错误, 导致在任何情况下都能成功, 那么它实际上什么都没有测试. 
      不断重复这个过程: **确定测试失败后, 再试图让它成功**\ .
    * 编写让测试刚好能够通过的代码. 
      在这个阶段, 无需完全实现所需的功能, 而只需要测试能够通过即可.
    * 改进(重构)代码以全面而准确地实现所需的功能, 同时确保测试依然能够成功.

提交代码时, 必须确保它们处于健康状态, 即没有任何测试是失败的. 
在任何情况下, 都不应该将存在失败测试的代码提交到公共代码库.

