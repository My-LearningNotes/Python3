``threading``\ 模块
===================

在Python中, 通常使用\ ``threading``\ 模块来实现多线程编程.

在\ ``threading``\ 模块中, 除了\ ``Thread``\ 类之外, 还包括许多非常好的同步机制.

+-----------------------+----------------------------------------------------------------------------------------+
| 对象                  | 描述                                                                                   |
+=======================+========================================================================================+
| ``Thread``            | 表示一个执行线程的对象                                                                 |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Lock``              | 锁原语对象                                                                             |
+-----------------------+----------------------------------------------------------------------------------------+
| ``RLock``             | 可重入锁对象, 使单一线程可以(再次)获得已持有的锁(递归锁)                               |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Condition``         | 条件变量对象                                                                           |
|                       |                                                                                        |
|                       | 使得一个线程等待另一个线程满足特定的"条件", 比如改变状态值或某个数据值                 |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Event``             | 条件变量的通用版本                                                                     |
|                       |                                                                                        |
|                       | 任意数量的线程等待某个事件发生, 在该事件发生后所有线程将被激活                         |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Semaphore``         | 信号量                                                                                 |
|                       |                                                                                        |
|                       | 为线程间共享的有限资源提供了一个"计数器",如果没有可用资源时会被阻塞                    |
+-----------------------+----------------------------------------------------------------------------------------+
| ``BoundedSemphore``   | 与\ ``Semaphore``\ 相似, 不过它不允许超过初始值                                        |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Timer``             | 与\ ``Thread``\ 类似, 不过它要在运行前等待一段时间                                     |
+-----------------------+----------------------------------------------------------------------------------------+
| ``Barrier``           | 创建一个"障碍", 必须达到指定数量的线程后才可以继续                                     |
+-----------------------+----------------------------------------------------------------------------------------+

除了各种同步和线程对象外, ``threading``\ 模块还提供了一些函数:

* ``threading.current_thread()``

返回当前的\ ``Thread``\ 对象.

* ``threading.active_count()``

返回当前活动的\ ``Thread``\ 对象的个数.

* ``threading.enumerate()``

返回当前活动的\ ``Thread``\ 对象列表.

* ``threading.settrace(func)``

为所有线程设置一个trace函数.

* ``threading.setprofile(func)``

为所有线程设置一个profile函数.

* ``threading.stack_size(size)``

返回新创建线程的栈大小; 或者为后续创建的线程设定栈的大小为\ ``size``\ .


守护线程(``Daemon``)
--------------------

``threading``\ 模块支持守护线程. 

如果把一个线程设置为守护线程, 就表示这个线程是不重要的, 进程退出时不需要等待这个线程执行完成. 
如果主线程准备退出时, 不需要等待某些子线程完成, 就可以为这些子线程设置守护线程标记. 

要将一个线程设置为守护线程, 需要在启动线程之前执行如下赋值语句: ``thread.daemon = True``\ . 
同样, 要检查线程的守护状态, 也只需要检查这个值即可. 
一个新的子线程会继承父线程的守护标记. 
整个Python程序将在所有非守护线程退出之后才退出.
