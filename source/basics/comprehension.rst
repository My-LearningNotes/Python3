推导式
======


列表推导式
----------

**列表推导是一种从其他列表(或序列, 或可迭代对象)创建列表的方式, 类似于数学中的集合推导.**\

列表推导的基本形式为: ``[表达式 迭代部分]``

-  在\ ``[]``\ 中定义

-  ``表达式``\ 定义如何生成列表的元素, 其中包含变量

-  迭代部分, 使用\ ``for``\ 语句迭代其他列表

-  迭代其他的列表, 将迭代变量代入表达式, 生成列表元素

-  迭代部分可以包含条件语句, 对迭代变量进行条件判断, 符合条件时才代入表达式

-  迭代部分可以包含多个\ ``for``\ 语句, 用来对多个列表迭代, 但需要注意语句之间是嵌套的关系

-  需要注意: **迭代部分可以有多条语句，这些语句之间是嵌套的关系**

-  表达式: 将迭代变量代入，生成列表的元素

Example:

.. code-block:: python

   # 一个简单的列表推导式
   [x*x for x in range(10)]

   # 迭代语句之后还有条件判断语句
   [x**2 for x in range(10) if x%3 == 0]

   # 在列表推导式中迭代多个列表
   # 后一个迭代语句是前一个迭代语句的字句
   [x*y for x in range(1, 5) for y in range(6, 10)]


字典推导式
----------

**字典推导, 是根据序列(或其它的可迭代对象)来创建字典.**

字典推导的基本形式为: ``{表达式1:表达式2 迭代部分}``

-  在\ ``{}``\ 中定义

-  ``表达式1``: 定义字典中的\ ``key``

-  ``表达式2``: 定义字典中的\ ``value``

-  迭代部分, 使用\ ``for``\ 对其它序列进行迭代

-  将迭代变量代入\ ``表达式1``\ 和\ ``表达式2``\ , 生成字典的\ ``key``\ 和\ ``value``

-  迭代部分可以包含条件判断语句, 对迭代变量进行条件判断, 只有符合条件时才代入表达式

-  迭代部分可以包含多个\ ``for``\ 语句, 用来对多个序列进行迭代, 但需要注意的是这些语句之间是嵌套的关系

Example:

.. code-block:: python

   squares = {i: "{} squared is {}".format(i, i**2) for i in range(10)}


生成器推导式
------------

-  生成器推导式使用圆括号定义, 定义方式和列表推导式类似

Example:

.. code-block:: python

   g = ((i+2) ** 2 for i in range(1, 10))

-  对于生成器推导式的使用

   -  可以使用\ ``for``\ 循环迭代

   -  可以使用内置函数\ ``next``\ 获取下一个元素, 当没有可返回的元素时, 引发\ ``StopIteration``\ 异常

Example:

.. code-block:: python

   g = ((i + 2) ** 2 for i in range(1, 10))
   for i in g:  # 使用for循环对生成器推导式迭代
   	print(i)

   g = ((x + 2) ** 2 for x in range(1, 10, 2))
   try:
   	while True:
   		print(next(g))
   except StopIteration:
   	print('Stop Iteration')

-  直接在一对既有的圆括号内(例如函数调用中)使用生成器推导式时, 无需再额外添加一对圆括号

可以编写如下所示的漂亮代码: 

.. code-block:: python

    sum((x+2)**2 for x in range(1, 10, 2))

