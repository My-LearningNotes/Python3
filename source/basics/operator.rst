运算符
======

Python支持以下类型的运算符:

-  算术运算符

-  关系运算符

-  赋值运算符

-  逻辑运算符

-  位运算符

-  成员检查运算符

-  身份运算符

运算符表示数学运算关系, 由运算符和运算数组合构成表达式, **表达式必有值**.

.. note::

  表达式: 表达某种数学运算关系的式子.

算术运算符
----------

-  ``+``

-  ``-``

-  ``*``

-  ``/`` - 除法, 返回浮点数

-  ``//`` - 取整除法, 结果值返回整数部分

-  ``%`` -取模(余数)

-  ``**`` - 幂运算

赋值运算符
----------

赋值表达式的值, 等于赋值运算符的右值.

-  ``=``

复合赋值运算符
~~~~~~~~~~~~~~

Python中的复合赋值运算符和C/C++中的类似:

-  ``+=``

-  ``-=``

-  ``*=``

-  ``/=``

-  ``//=``

-  ``%=``

-  ``**=``

关系运算符
----------

关系运算符的结果为\ ``bool``\ 类型: ``True`` of ``False``.

-  ``==``

   注意区分等于关系运算符和赋值运算符

-  ``!=``

-  ``>``

-  ``>=``

-  ``<``

-  ``<=``

位运算符
--------

-  ``&`` - 按位与

-  ``|`` - 按位或

-  ``~`` - 按位取反

-  ``^`` - 按位异或(相同为假, 不同为真)

-  ``<<`` - 左移

-  ``>>`` - 右移

逻辑运算符
----------

-  ``and``

-  ``or``

-  ``not``

.. note::

  布尔运算符有个有趣的特征: 只做必要的计算.

  例如, 仅当x和y都为真时, 表达式\ ``x and y``\ 才为真. 因此, 如果\ ``x``\ 为假, 这个表达式立即返回假, 而不关系\ ``y``.

  实际上, 如果\ ``x``\ 为假, 这个表达式将返回\ ``x``, 否则返回\ ``y``.

  这种行为称为\ **短路逻辑**\ (或者**延迟求值**): 布尔运算符,
  在有些情况下将"绕过"第二个值(如果第一个值就可以确定表达式的值, 则就不管第二个值了).

  请注意, 这意味着位于布尔运算符后面的代码(如函数调用)可能根本不会执行.

成员检查运算符
--------------

-  ``in``

-  ``not in``

身份运算符
----------

-  ``is/is not``

   判断是否是同一个对象.

-  ``is``\ 和\ ``==``\ 的区别

   -  ``is``\ 用来判断是否是同一个对象

   -  ``==``\ 用来判断两个值是否相等

.. note::

  Python运算符的优先级控制: 使用圆括号()来控制执行顺序.
