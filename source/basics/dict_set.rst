字典和集合
==========

字典
----

序列是一种数据结构, 其中的元素按顺序存储, 每个元素都有一个索引, 通过索引来访问元素.
列表, 元组和字符串都属于序列.

映射是另一种数据结构, 其中的值不按顺序存储, 而是存储在键下, 通过键来取值.
键可能是数字, 字符串或元组(不可变类型的值).

字典是Python中唯一的内置映射类型.

.. note::

  序列, 通过索引来取值

  字典, 通过键来取值

创建和使用字典
~~~~~~~~~~~~~~

``map``, 又称字典或键值对, 由键和值组成, 这种键-值对称为\ **项(item)**.

-  使用花括号\ ``{}``\ 定义map

-  每个键与其值之间都用\ ``:``\ 分隔

-  项之间用逗号分隔

-  空字典表示没有任何项的字典, 用\ ``{}``\ 表示

-  在map中, 键必须是唯一的, 而值无需如此

-  在map中, 键只能是不可变类型的值, 如数, 字符串, 元组

函数\ ``dict``
~~~~~~~~~~~~~~

可使用函数\ ``dict``\ 从其他映射(如其他字典)或键值对序列创建字典.

.. note::

  键-值对序列, 指一个序列, 其的每一个元素又是一个包含两个元素的序列, 分别对应\ ``key``\ 和\ ``value``.

Example:

.. code:: python

  items = [('name', 'Gumby'), {'age', 42}]
  d = dict(item)

还可以使用关键字实参来调用\ ``dict``\ 函数, 关键字的名称对应\ ``key``, 其值对应\ ``value``.

Example:

.. code:: python

  d = dict(name='Gumby', age=42)

基本的字段操作
~~~~~~~~~~~~~~

字典的很多行为在很多方面都类似与序列.

-  ``len(d)`` - 返回字典d包含的项的数目

-  ``d[k]`` - 返回与键k相关联的值

-  ``d[k] = v`` - 将值v关联到键k

-  ``del d[k]`` - 删除键为k的项

-  ``k in d`` - 检查字典d是否包含键为k的项

虽然字典和列表有多个相同之处, 但也有一些重要的不同之处.

-  键的类型

   字典中的键可以是任何不可变类型的值, 如数, 字符串或元组.

-  自动添加

   即便是字典中原本没有的键, 也可以给它赋值, 这将在字典中创建一个新的项.

   然而, 如果不使用\ ``append``\ 或其他类似的方法, 就不能给列表中没有的元素赋值.

-  成员资格检查

   表达式\ ``k in d``\ (其中d是一个字典)查找的是键而不是值,
   而表达式\ ``v in l``\ (其中l是一个列表)查找的是值而不是索引.

.. note::

  相对于检查列表中是否包含指定的值,
  检查字典是否包含指定的键的效率更高.

  数据结构越大, 效率差距就越大.

将字符串格式设置功能用于字典
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

通过在字典中存储一系列命名的值, 格式字符串从字典中提取所需的信息.

为此,格式字符串必须使用\ ``format_map``\ 方法来指出将通过一个映射来提供所需的信息.

可指定任意数量的转换说明符, 条件是所有的字段名都是包含在字典的键中.

Example:

.. code:: python

   phonebook = {'Beth': '9102', 'Alice': '2341', 'Cecil': '3258'}
   "Cecil's phone number is {Cecil}".format_map(phonebook)

字典方法
~~~~~~~~

与其他内置类型一样, 字典也有方法.

字典的很多方法很多有用, 但其使用频率可能没有列表和字符串的方法那样高.

我们可以大致了解一下字典提供了哪些方法,
等需要使用特定的方法时再详细研究.

集合
----

集合是一个无序不重复元素的集.

在Python中, 集合和字典一样, 使用\ ``{}``\ 定义.

在字典中, 项以\ ``key: value``\ 的形式定义; 在集合中, 元素直接列出,
就和列表中一样.

